predicate jacop_networkflow(array [int,int] of int: arc,array [int] of var int: flow,array [int] of var int: weight,array [int] of int: balance,var int: cost);
array [1..14] of int: X_INTRODUCED_15_ = [1,1,1,1,1,1,1,1,1,1,1,1,1,1];
array [1..6] of int: X_INTRODUCED_16_ = [2,0,0,0,-1,-1];
array [1..28] of int: X_INTRODUCED_17_ = [1,2,1,3,2,3,2,4,3,5,4,5,4,6,2,1,3,1,3,2,4,2,5,3,5,4,6,4];
var 0..2: X_INTRODUCED_0_;
var 0..2: X_INTRODUCED_1_;
var 0..2: X_INTRODUCED_2_;
var 0..2: X_INTRODUCED_3_;
var 0..2: X_INTRODUCED_4_;
var 0..2: X_INTRODUCED_5_;
var 0..2: X_INTRODUCED_6_;
var 0..2: X_INTRODUCED_7_;
var 0..2: X_INTRODUCED_8_;
var 0..2: X_INTRODUCED_9_;
var 0..2: X_INTRODUCED_10_;
var 0..2: X_INTRODUCED_11_;
var 0..2: X_INTRODUCED_12_;
var 0..2: X_INTRODUCED_13_;
var int: total:: output_var;
var int: X_INTRODUCED_14_ ::var_is_introduced ;
array [1..14] of var int: path:: output_array([1..14]) = [X_INTRODUCED_0_,X_INTRODUCED_1_,X_INTRODUCED_2_,X_INTRODUCED_3_,X_INTRODUCED_4_,X_INTRODUCED_5_,X_INTRODUCED_6_,X_INTRODUCED_7_,X_INTRODUCED_8_,X_INTRODUCED_9_,X_INTRODUCED_10_,X_INTRODUCED_11_,X_INTRODUCED_12_,X_INTRODUCED_13_];
constraint jacop_networkflow(X_INTRODUCED_17_,path,X_INTRODUCED_15_,X_INTRODUCED_16_,X_INTRODUCED_14_);
constraint int_le(0,X_INTRODUCED_14_);
solve  minimize total;
